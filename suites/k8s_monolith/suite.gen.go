// Code generated by gotestmd DO NOT EDIT.
package k8s_monolith

import (
	"fmt"
	"sync"
	"testing"

	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
	"github.com/networkservicemesh/integration-tests/suites/k8s_monolith/external_nsc"
	"github.com/networkservicemesh/integration-tests/suites/k8s_monolith/external_nse"
)

type Suite struct {
	base.Suite
	external_nscSuite external_nsc.Suite
	external_nseSuite external_nse.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
	s.RunIncludedSuites()
}
func (s *Suite) RunIncludedSuites() {
	s.Run("External_nsc", func() {
		suite.Run(s.T(), &s.external_nscSuite)
	})
	s.Run("External_nse", func() {
		suite.Run(s.T(), &s.external_nseSuite)
	})
}

const workerCount = 5

func worker(jobsCh <-chan func(), wg *sync.WaitGroup) {
	for j := range jobsCh {
		fmt.Println("Executing a job...")
		j()
	}
	fmt.Println("Worker is finishing...")
	wg.Done()
}
func (s *Suite) TestAll() {
	tests := []func(t *testing.T){}
	jobCh := make(chan func(), len(tests))
	wg := new(sync.WaitGroup)
	wg.Add(workerCount)
	for i := 0; i < workerCount; i++ {
		go worker(jobCh, wg)
	}
	for i := range tests {
		test := tests[i]
		jobCh <- func() {
			s.T().Run("TestName", test)
		}
	}
	wg.Wait()
}
func (s *Suite) Test() {}
