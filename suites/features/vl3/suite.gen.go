// Code generated by gotestmd DO NOT EDIT.
package vl3

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
)

type Suite struct {
	base.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
}
func (s *Suite) TestBasic() {
	r := s.Runner("../deployments-k8s/examples/features/vl3/basic")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-vl3`)
	})
	r.Run(`kubectl create ns ns-vl3`)
	r.Run(`kubectl apply -k .`)
	r.Run(`nscs=$(kubectl  get pods -l app=nsc-kernel -o go-template --template="{{range .items}}{{.metadata.name}} {{end}}" -n ns-vl3) ` + "\n" + `[[ ! -z $nscs ]]`)
	r.Run(`for nsc in $nscs ` + "\n" + `do` + "\n" + `    ipAddr=$(kubectl exec -n ns-vl3 $nsc -- ifconfig nsm-1)` + "\n" + `    ipAddr=$(echo $ipAddr | grep -Eo 'inet addr:[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'| cut -c 11-)` + "\n" + `    for pinger in $nscs` + "\n" + `    do` + "\n" + `        echo $pinger pings $ipAddr` + "\n" + `        kubectl exec $pinger -n ns-vl3 -- ping -c4 $ipAddr` + "\n" + `    done` + "\n" + `done`)
	r.Run(`for nsc in $nscs ` + "\n" + `do` + "\n" + `    echo $nsc pings nses` + "\n" + `    kubectl exec -n ns-vl3 $nsc -- ping 169.254.0.0 -c4` + "\n" + `    kubectl exec -n ns-vl3 $nsc -- ping 169.254.1.0 -c4` + "\n" + `done`)
}
func (s *Suite) TestScale_from_zero() {
	r := s.Runner("../deployments-k8s/examples/features/vl3/scale-from-zero")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-vl3`)
		r.Run(`kubectl delete -n nsm-system networkservices.networkservicemesh.io autoscale-icmp-responder` + "\n" + `kubectl delete -n nsm-system networkservices.networkservicemesh.io my-vl3-network`)
	})
	r.Run(`kubectl create ns ns-vl3`)
	r.Run(`kubectl apply -f ./autoscale-netsvc.yaml` + "\n" + `kubectl apply -f ./vl3-netsvc.yaml`)
	r.Run(`kubectl apply -k .`)
	r.Run(`kubectl wait -n ns-vl3 --for=condition=ready --timeout=1m pod -l app=nse-supplier-k8s`)
	r.Run(`kubectl wait -n ns-vl3 --for=condition=ready --timeout=1m pod -l app=nsc-kernel`)
	r.Run(`kubectl wait -n ns-vl3 --for=condition=ready --timeout=1m pod -l app=nse-vl3-vpp`)
	r.Run(`nscs=$(kubectl  get pods -l app=nsc-kernel -o go-template --template="{{range .items}}{{.metadata.name}} {{end}}" -n ns-vl3) ` + "\n" + `[[ ! -z $nscs ]]`)
	r.Run(`for nsc in $nscs ` + "\n" + `do` + "\n" + `    ipAddr=$(kubectl exec -n ns-vl3 $nsc -- ifconfig nsm-1)` + "\n" + `    ipAddr=$(echo $ipAddr | grep -Eo 'inet addr:[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'| cut -c 11-)` + "\n" + `    for pinger in $nscs` + "\n" + `    do` + "\n" + `        echo $pinger pings $ipAddr` + "\n" + `        kubectl exec $pinger -n ns-vl3 -- ping -c4 $ipAddr` + "\n" + `    done` + "\n" + `done`)
	r.Run(`for nsc in $nscs ` + "\n" + `do` + "\n" + `    echo $nsc pings nses` + "\n" + `    kubectl exec -n ns-vl3 $nsc -- ping 169.254.0.0 -c4` + "\n" + `    kubectl exec -n ns-vl3 $nsc -- ping 169.254.1.0 -c4` + "\n" + `done`)
}
