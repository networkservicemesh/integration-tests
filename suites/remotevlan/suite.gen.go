// Code generated by gotestmd DO NOT EDIT.
package remotevlan

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
	"github.com/networkservicemesh/integration-tests/suites/remotevlan/rvlanvpp"
	"github.com/networkservicemesh/integration-tests/suites/spire"
)

type Suite struct {
	base.Suite
	spireSuite    spire.Suite
	rvlanvppSuite rvlanvpp.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite, &s.spireSuite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
	r := s.Runner("../deployments-k8s/examples/remotevlan")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete mutatingwebhookconfiguration --all` + "\n" + `    kubectl delete ns nsm-system`)
		r.Run(`docker network disconnect bridge-2 kind-worker` + "\n" + `    docker network disconnect bridge-2 kind-worker2` + "\n" + `    docker network rm bridge-2` + "\n" + `    docker exec kind-worker ip link del eth1` + "\n" + `    docker exec kind-worker2 ip link del eth1` + "\n" + `    true`)
	})
	r.Run(`docker network create bridge-2` + "\n" + `    docker network connect bridge-2 kind-worker` + "\n" + `    docker network connect bridge-2 kind-worker2`)
	r.Run(`ifw1=$(echo $(docker exec kind-worker ip link | tail -2 | head -1) | cut -f1 -d"@" | cut -f2 -d" ")` + "\n" + `    docker exec kind-worker ip link set $ifw1 down` + "\n" + `    docker exec kind-worker ip link set $ifw1 name eth1` + "\n" + `    docker exec kind-worker ip link set eth1 up` + "\n" + `    ifw2=$(echo $(docker exec kind-worker2 ip link | tail -2 | head -1) | cut -f1 -d"@" | cut -f2 -d" ")` + "\n" + `    docker exec kind-worker2 ip link set $ifw2 down` + "\n" + `    docker exec kind-worker2 ip link set $ifw2 name eth1` + "\n" + `    docker exec kind-worker2 ip link set eth1 up`)
	r.Run(`kubectl create ns nsm-system`)
	r.Run(`kubectl apply -k .`)
	r.Run(`kubectl -n nsm-system wait --for=condition=ready --timeout=2m pod -l app=nse-remote-vlan`)
	r.Run(`WH=$(kubectl get pods -l app=admission-webhook-k8s -n nsm-system --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')` + "\n" + `    kubectl wait --for=condition=ready --timeout=1m pod ${WH} -n nsm-system`)
	s.RunIncludedSuites()
}
func (s *Suite) RunIncludedSuites() {
	runTest := func(subSuite suite.TestingSuite, suiteName, testName string, subtest func()) {
		type runner interface {
			Run(name string, f func()) bool
		}
		defer func() {
			if afterTestSuite, ok := subSuite.(suite.AfterTest); ok {
				afterTestSuite.AfterTest(suiteName, testName)
			}
			if tearDownTestSuite, ok := subSuite.(suite.TearDownTestSuite); ok {
				tearDownTestSuite.TearDownTest()
			}
		}()
		if setupTestSuite, ok := subSuite.(suite.SetupTestSuite); ok {
			setupTestSuite.SetupTest()
		}
		if beforeTestSuite, ok := subSuite.(suite.BeforeTest); ok {
			beforeTestSuite.BeforeTest(suiteName, testName)
		}
		// Run test
		subSuite.(runner).Run(testName, subtest)
	}
	s.Run("Rvlanvpp", func() {
		s.rvlanvppSuite.SetT(s.T())
		s.rvlanvppSuite.SetupSuite()
		runTest(&s.rvlanvppSuite, "Rvlanvpp", "TestKernel2RVlan", s.rvlanvppSuite.TestKernel2RVlan)
	})
}
func (s *Suite) Test() {}
